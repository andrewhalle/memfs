#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]
/* automatically generated by rust-bindgen */
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const FUSE_USE_VERSION: u32 = 31;
pub const FUSE_OPT_KEY_OPT: i32 = -1;
pub const FUSE_OPT_KEY_NONOPT: i32 = -2;
pub const FUSE_OPT_KEY_KEEP: i32 = -3;
pub const FUSE_OPT_KEY_DISCARD: i32 = -4;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const FUSE_MAJOR_VERSION: u32 = 3;
pub const FUSE_MINOR_VERSION: u32 = 2;
pub const FUSE_CAP_ASYNC_READ: u32 = 1;
pub const FUSE_CAP_POSIX_LOCKS: u32 = 2;
pub const FUSE_CAP_ATOMIC_O_TRUNC: u32 = 8;
pub const FUSE_CAP_EXPORT_SUPPORT: u32 = 16;
pub const FUSE_CAP_DONT_MASK: u32 = 64;
pub const FUSE_CAP_SPLICE_WRITE: u32 = 128;
pub const FUSE_CAP_SPLICE_MOVE: u32 = 256;
pub const FUSE_CAP_SPLICE_READ: u32 = 512;
pub const FUSE_CAP_FLOCK_LOCKS: u32 = 1024;
pub const FUSE_CAP_IOCTL_DIR: u32 = 2048;
pub const FUSE_CAP_AUTO_INVAL_DATA: u32 = 4096;
pub const FUSE_CAP_READDIRPLUS: u32 = 8192;
pub const FUSE_CAP_READDIRPLUS_AUTO: u32 = 16384;
pub const FUSE_CAP_ASYNC_DIO: u32 = 32768;
pub const FUSE_CAP_WRITEBACK_CACHE: u32 = 65536;
pub const FUSE_CAP_NO_OPEN_SUPPORT: u32 = 131072;
pub const FUSE_CAP_PARALLEL_DIROPS: u32 = 262144;
pub const FUSE_CAP_POSIX_ACL: u32 = 524288;
pub const FUSE_CAP_HANDLE_KILLPRIV: u32 = 1048576;
pub const FUSE_CAP_NO_OPENDIR_SUPPORT: u32 = 16777216;
pub const FUSE_IOCTL_COMPAT: u32 = 1;
pub const FUSE_IOCTL_UNRESTRICTED: u32 = 2;
pub const FUSE_IOCTL_RETRY: u32 = 4;
pub const FUSE_IOCTL_DIR: u32 = 16;
pub const FUSE_IOCTL_MAX_IOV: u32 = 256;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const _SYS_STATVFS_H: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
#[doc = " Option description"]
#[doc = ""]
#[doc = " This structure describes a single option, and action associated"]
#[doc = " with it, in case it matches."]
#[doc = ""]
#[doc = " More than one such match may occur, in which case the action for"]
#[doc = " each match is executed."]
#[doc = ""]
#[doc = " There are three possible actions in case of a match:"]
#[doc = ""]
#[doc = " i) An integer (int or unsigned) variable determined by 'offset' is"]
#[doc = "    set to 'value'"]
#[doc = ""]
#[doc = " ii) The processing function is called, with 'value' as the key"]
#[doc = ""]
#[doc = " iii) An integer (any) or string (char *) variable determined by"]
#[doc = "    'offset' is set to the value of an option parameter"]
#[doc = ""]
#[doc = " 'offset' should normally be either set to"]
#[doc = ""]
#[doc = "  - 'offsetof(struct foo, member)'  actions i) and iii)"]
#[doc = ""]
#[doc = "  - -1\t\t\t      action ii)"]
#[doc = ""]
#[doc = " The 'offsetof()' macro is defined in the <stddef.h> header."]
#[doc = ""]
#[doc = " The template determines which options match, and also have an"]
#[doc = " effect on the action.  Normally the action is either i) or ii), but"]
#[doc = " if a format is present in the template, then action iii) is"]
#[doc = " performed."]
#[doc = ""]
#[doc = " The types of templates are:"]
#[doc = ""]
#[doc = " 1) \"-x\", \"-foo\", \"--foo\", \"--foo-bar\", etc.\tThese match only"]
#[doc = "   themselves.  Invalid values are \"--\" and anything beginning"]
#[doc = "   with \"-o\""]
#[doc = ""]
#[doc = " 2) \"foo\", \"foo-bar\", etc.  These match \"-ofoo\", \"-ofoo-bar\" or"]
#[doc = "    the relevant option in a comma separated option list"]
#[doc = ""]
#[doc = " 3) \"bar=\", \"--foo=\", etc.  These are variations of 1) and 2)"]
#[doc = "    which have a parameter"]
#[doc = ""]
#[doc = " 4) \"bar=%s\", \"--foo=%lu\", etc.  Same matching as above but perform"]
#[doc = "    action iii)."]
#[doc = ""]
#[doc = " 5) \"-x \", etc.  Matches either \"-xparam\" or \"-x param\" as"]
#[doc = "    two separate arguments"]
#[doc = ""]
#[doc = " 6) \"-x %s\", etc.  Combination of 4) and 5)"]
#[doc = ""]
#[doc = " If the format is \"%s\", memory is allocated for the string unlike with"]
#[doc = " scanf().  The previous value (if non-NULL) stored at the this location is"]
#[doc = " freed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_opt {
    #[doc = " Matching template and optional parameter formatting"]
    pub templ: *const ::std::os::raw::c_char,
    #[doc = " Offset of variable within 'data' parameter of fuse_opt_parse()"]
    #[doc = " or -1"]
    pub offset: ::std::os::raw::c_ulong,
    #[doc = " Value to set the variable to, or to be passed as 'key' to the"]
    #[doc = " processing function.\t Ignored if template has a format"]
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_opt() {
    assert_eq!(
        ::std::mem::size_of::<fuse_opt>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_opt>())).templ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(templ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_opt>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_opt>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " Argument list"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_args {
    #[doc = " Argument count"]
    pub argc: ::std::os::raw::c_int,
    #[doc = " Argument vector.  NULL terminated"]
    pub argv: *mut *mut ::std::os::raw::c_char,
    #[doc = " Is 'argv' allocated?"]
    pub allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_args() {
    assert_eq!(
        ::std::mem::size_of::<fuse_args>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_args))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_args>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_args>())).argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_args>())).argv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_args>())).allocated as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(allocated)
        )
    );
}
#[doc = " Processing function"]
#[doc = ""]
#[doc = " This function is called if"]
#[doc = "    - option did not match any 'struct fuse_opt'"]
#[doc = "    - argument is a non-option"]
#[doc = "    - option did match and offset was set to -1"]
#[doc = ""]
#[doc = " The 'arg' parameter will always contain the whole argument or"]
#[doc = " option including the parameter if exists.  A two-argument option"]
#[doc = " (\"-x foo\") is always converted to single argument option of the"]
#[doc = " form \"-xfoo\" before this function is called."]
#[doc = ""]
#[doc = " Options of the form '-ofoo' are passed to this function without the"]
#[doc = " '-o' prefix."]
#[doc = ""]
#[doc = " The return value of this function determines whether this argument"]
#[doc = " is to be inserted into the output argument vector, or discarded."]
#[doc = ""]
#[doc = " @param data is the user data passed to the fuse_opt_parse() function"]
#[doc = " @param arg is the whole argument or option"]
#[doc = " @param key determines why the processing function was called"]
#[doc = " @param outargs the current output argument list"]
#[doc = " @return -1 on error, 0 if arg is to be discarded, 1 if arg should be kept"]
pub type fuse_opt_proc_t = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        arg: *const ::std::os::raw::c_char,
        key: ::std::os::raw::c_int,
        outargs: *mut fuse_args,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " Option parsing function"]
    #[doc = ""]
    #[doc = " If 'args' was returned from a previous call to fuse_opt_parse() or"]
    #[doc = " it was constructed from"]
    #[doc = ""]
    #[doc = " A NULL 'args' is equivalent to an empty argument vector"]
    #[doc = ""]
    #[doc = " A NULL 'opts' is equivalent to an 'opts' array containing a single"]
    #[doc = " end marker"]
    #[doc = ""]
    #[doc = " A NULL 'proc' is equivalent to a processing function always"]
    #[doc = " returning '1'"]
    #[doc = ""]
    #[doc = " @param args is the input and output argument list"]
    #[doc = " @param data is the user data"]
    #[doc = " @param opts is the option description array"]
    #[doc = " @param proc is the processing function"]
    #[doc = " @return -1 on error, 0 on success"]
    pub fn fuse_opt_parse(
        args: *mut fuse_args,
        data: *mut ::std::os::raw::c_void,
        opts: *const fuse_opt,
        proc_: fuse_opt_proc_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an option to a comma separated option list"]
    #[doc = ""]
    #[doc = " @param opts is a pointer to an option list, may point to a NULL value"]
    #[doc = " @param opt is the option to add"]
    #[doc = " @return -1 on allocation error, 0 on success"]
    pub fn fuse_opt_add_opt(
        opts: *mut *mut ::std::os::raw::c_char,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an option, escaping commas, to a comma separated option list"]
    #[doc = ""]
    #[doc = " @param opts is a pointer to an option list, may point to a NULL value"]
    #[doc = " @param opt is the option to add"]
    #[doc = " @return -1 on allocation error, 0 on success"]
    pub fn fuse_opt_add_opt_escaped(
        opts: *mut *mut ::std::os::raw::c_char,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an argument to a NULL terminated argument vector"]
    #[doc = ""]
    #[doc = " @param args is the structure containing the current argument list"]
    #[doc = " @param arg is the new argument to add"]
    #[doc = " @return -1 on allocation error, 0 on success"]
    pub fn fuse_opt_add_arg(
        args: *mut fuse_args,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an argument at the specified position in a NULL terminated"]
    #[doc = " argument vector"]
    #[doc = ""]
    #[doc = " Adds the argument to the N-th position.  This is useful for adding"]
    #[doc = " options at the beginning of the array which must not come after the"]
    #[doc = " special '--' option."]
    #[doc = ""]
    #[doc = " @param args is the structure containing the current argument list"]
    #[doc = " @param pos is the position at which to add the argument"]
    #[doc = " @param arg is the new argument to add"]
    #[doc = " @return -1 on allocation error, 0 on success"]
    pub fn fuse_opt_insert_arg(
        args: *mut fuse_args,
        pos: ::std::os::raw::c_int,
        arg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free the contents of argument list"]
    #[doc = ""]
    #[doc = " The structure itself is not freed"]
    #[doc = ""]
    #[doc = " @param args is the structure containing the argument list"]
    pub fn fuse_opt_free_args(args: *mut fuse_args);
}
extern "C" {
    #[doc = " Check if an option matches"]
    #[doc = ""]
    #[doc = " @param opts is the option description array"]
    #[doc = " @param opt is the option to match"]
    #[doc = " @return 1 if a match is found, 0 if not"]
    pub fn fuse_opt_match(
        opts: *const fuse_opt,
        opt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub const fuse_log_level_FUSE_LOG_EMERG: fuse_log_level = 0;
pub const fuse_log_level_FUSE_LOG_ALERT: fuse_log_level = 1;
pub const fuse_log_level_FUSE_LOG_CRIT: fuse_log_level = 2;
pub const fuse_log_level_FUSE_LOG_ERR: fuse_log_level = 3;
pub const fuse_log_level_FUSE_LOG_WARNING: fuse_log_level = 4;
pub const fuse_log_level_FUSE_LOG_NOTICE: fuse_log_level = 5;
pub const fuse_log_level_FUSE_LOG_INFO: fuse_log_level = 6;
pub const fuse_log_level_FUSE_LOG_DEBUG: fuse_log_level = 7;
#[doc = " Log severity level"]
#[doc = ""]
#[doc = " These levels correspond to syslog(2) log levels since they are widely used."]
pub type fuse_log_level = u32;
#[doc = " Log message handler function."]
#[doc = ""]
#[doc = " This function must be thread-safe.  It may be called from any libfuse"]
#[doc = " function, including fuse_parse_cmdline() and other functions invoked before"]
#[doc = " a FUSE filesystem is created."]
#[doc = ""]
#[doc = " Install a custom log message handler function using fuse_set_log_func()."]
#[doc = ""]
#[doc = " @param level log severity level"]
#[doc = " @param fmt sprintf-style format string including newline"]
#[doc = " @param ap format string arguments"]
pub type fuse_log_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: fuse_log_level,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ),
>;
extern "C" {
    #[doc = " Install a custom log handler function."]
    #[doc = ""]
    #[doc = " Log messages are emitted by libfuse functions to report errors and debug"]
    #[doc = " information.  Messages are printed to stderr by default but this can be"]
    #[doc = " overridden by installing a custom log message handler function."]
    #[doc = ""]
    #[doc = " The log message handler function is global and affects all FUSE filesystems"]
    #[doc = " created within this process."]
    #[doc = ""]
    #[doc = " @param func a custom log message handler function or NULL to revert to"]
    #[doc = "             the default"]
    pub fn fuse_set_log_func(func: fuse_log_func_t);
}
extern "C" {
    #[doc = " Emit a log message"]
    #[doc = ""]
    #[doc = " @param level severity level (FUSE_LOG_ERR, FUSE_LOG_DEBUG, etc)"]
    #[doc = " @param fmt sprintf-style format string including newline"]
    pub fn fuse_log(level: fuse_log_level, fmt: *const ::std::os::raw::c_char, ...);
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[doc = " Information about an open file."]
#[doc = ""]
#[doc = " File Handles are created by the open, opendir, and create methods and closed"]
#[doc = " by the release and releasedir methods.  Multiple file handles may be"]
#[doc = " concurrently open for the same file.  Generally, a client will create one"]
#[doc = " file handle per file descriptor, though in some cases multiple file"]
#[doc = " descriptors can share a single file handle."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_file_info {
    #[doc = " Open flags.\t Available in open() and release()"]
    pub flags: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize], u32>,
    #[doc = " File handle id.  May be filled in by filesystem in create,"]
    #[doc = " open, and opendir().  Available in most other file operations on the"]
    #[doc = " same file handle."]
    pub fh: u64,
    #[doc = " Lock owner id.  Available in locking operations and flush"]
    pub lock_owner: u64,
    #[doc = " Requested poll events.  Available in ->poll.  Only set on kernels"]
    #[doc = "which support it.  If unsupported, this field is set to zero."]
    pub poll_events: u32,
}
#[test]
fn bindgen_test_layout_fuse_file_info() {
    assert_eq!(
        ::std::mem::size_of::<fuse_file_info>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_file_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).fh as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).lock_owner as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(lock_owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_file_info>())).poll_events as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(poll_events)
        )
    );
}
impl fuse_file_info {
    #[inline]
    pub fn writepage(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_writepage(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_io(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_io(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_cache(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keep_cache(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flush(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flush(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nonseekable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nonseekable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flock_release(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flock_release(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cache_readdir(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cache_readdir(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn padding2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_padding2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        writepage: ::std::os::raw::c_uint,
        direct_io: ::std::os::raw::c_uint,
        keep_cache: ::std::os::raw::c_uint,
        flush: ::std::os::raw::c_uint,
        nonseekable: ::std::os::raw::c_uint,
        flock_release: ::std::os::raw::c_uint,
        cache_readdir: ::std::os::raw::c_uint,
        padding: ::std::os::raw::c_uint,
        padding2: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let writepage: u32 = unsafe { ::std::mem::transmute(writepage) };
            writepage as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let direct_io: u32 = unsafe { ::std::mem::transmute(direct_io) };
            direct_io as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let keep_cache: u32 = unsafe { ::std::mem::transmute(keep_cache) };
            keep_cache as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let flush: u32 = unsafe { ::std::mem::transmute(flush) };
            flush as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let nonseekable: u32 = unsafe { ::std::mem::transmute(nonseekable) };
            nonseekable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let flock_release: u32 = unsafe { ::std::mem::transmute(flock_release) };
            flock_release as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cache_readdir: u32 = unsafe { ::std::mem::transmute(cache_readdir) };
            cache_readdir as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let padding: u32 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let padding2: u32 = unsafe { ::std::mem::transmute(padding2) };
            padding2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " Configuration parameters passed to fuse_session_loop_mt() and"]
#[doc = " fuse_loop_mt()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_loop_config {
    #[doc = " whether to use separate device fds for each thread"]
    #[doc = " (may increase performance)"]
    pub clone_fd: ::std::os::raw::c_int,
    #[doc = " The maximum number of available worker threads before they"]
    #[doc = " start to get deleted when they become idle. If not"]
    #[doc = " specified, the default is 10."]
    #[doc = ""]
    #[doc = " Adjusting this has performance implications; a very small number"]
    #[doc = " of threads in the pool will cause a lot of thread creation and"]
    #[doc = " deletion overhead and performance may suffer. When set to 0, a new"]
    #[doc = " thread will be created to service every operation."]
    pub max_idle_threads: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_fuse_loop_config() {
    assert_eq!(
        ::std::mem::size_of::<fuse_loop_config>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_loop_config))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_loop_config>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_loop_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_loop_config>())).clone_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_loop_config),
            "::",
            stringify!(clone_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_loop_config>())).max_idle_threads as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_loop_config),
            "::",
            stringify!(max_idle_threads)
        )
    );
}
#[doc = " Connection information, passed to the ->init() method"]
#[doc = ""]
#[doc = " Some of the elements are read-write, these can be changed to"]
#[doc = " indicate the value requested by the filesystem.  The requested"]
#[doc = " value must usually be smaller than the indicated value."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_conn_info {
    #[doc = " Major version of the protocol (read-only)"]
    pub proto_major: ::std::os::raw::c_uint,
    #[doc = " Minor version of the protocol (read-only)"]
    pub proto_minor: ::std::os::raw::c_uint,
    #[doc = " Maximum size of the write buffer"]
    pub max_write: ::std::os::raw::c_uint,
    #[doc = " Maximum size of read requests. A value of zero indicates no"]
    #[doc = " limit. However, even if the filesystem does not specify a"]
    #[doc = " limit, the maximum size of read requests will still be"]
    #[doc = " limited by the kernel."]
    #[doc = ""]
    #[doc = " NOTE: For the time being, the maximum size of read requests"]
    #[doc = " must be set both here *and* passed to fuse_session_new()"]
    #[doc = " using the ``-o max_read=<n>`` mount option. At some point"]
    #[doc = " in the future, specifying the mount option will no longer"]
    #[doc = " be necessary."]
    pub max_read: ::std::os::raw::c_uint,
    #[doc = " Maximum readahead"]
    pub max_readahead: ::std::os::raw::c_uint,
    #[doc = " Capability flags that the kernel supports (read-only)"]
    pub capable: ::std::os::raw::c_uint,
    #[doc = " Capability flags that the filesystem wants to enable."]
    #[doc = ""]
    #[doc = " libfuse attempts to initialize this field with"]
    #[doc = " reasonable default values before calling the init() handler."]
    pub want: ::std::os::raw::c_uint,
    #[doc = " Maximum number of pending \"background\" requests. A"]
    #[doc = " background request is any type of request for which the"]
    #[doc = " total number is not limited by other means. As of kernel"]
    #[doc = " 4.8, only two types of requests fall into this category:"]
    #[doc = ""]
    #[doc = "   1. Read-ahead requests"]
    #[doc = "   2. Asynchronous direct I/O requests"]
    #[doc = ""]
    #[doc = " Read-ahead requests are generated (if max_readahead is"]
    #[doc = " non-zero) by the kernel to preemptively fill its caches"]
    #[doc = " when it anticipates that userspace will soon read more"]
    #[doc = " data."]
    #[doc = ""]
    #[doc = " Asynchronous direct I/O requests are generated if"]
    #[doc = " FUSE_CAP_ASYNC_DIO is enabled and userspace submits a large"]
    #[doc = " direct I/O request. In this case the kernel will internally"]
    #[doc = " split it up into multiple smaller requests and submit them"]
    #[doc = " to the filesystem concurrently."]
    #[doc = ""]
    #[doc = " Note that the following requests are *not* background"]
    #[doc = " requests: writeback requests (limited by the kernel's"]
    #[doc = " flusher algorithm), regular (i.e., synchronous and"]
    #[doc = " buffered) userspace read/write requests (limited to one per"]
    #[doc = " thread), asynchronous read requests (Linux's io_submit(2)"]
    #[doc = " call actually blocks, so these are also limited to one per"]
    #[doc = " thread)."]
    pub max_background: ::std::os::raw::c_uint,
    #[doc = " Kernel congestion threshold parameter. If the number of pending"]
    #[doc = " background requests exceeds this number, the FUSE kernel module will"]
    #[doc = " mark the filesystem as \"congested\". This instructs the kernel to"]
    #[doc = " expect that queued requests will take some time to complete, and to"]
    #[doc = " adjust its algorithms accordingly (e.g. by putting a waiting thread"]
    #[doc = " to sleep instead of using a busy-loop)."]
    pub congestion_threshold: ::std::os::raw::c_uint,
    #[doc = " When FUSE_CAP_WRITEBACK_CACHE is enabled, the kernel is responsible"]
    #[doc = " for updating mtime and ctime when write requests are received. The"]
    #[doc = " updated values are passed to the filesystem with setattr() requests."]
    #[doc = " However, if the filesystem does not support the full resolution of"]
    #[doc = " the kernel timestamps (nanoseconds), the mtime and ctime values used"]
    #[doc = " by kernel and filesystem will differ (and result in an apparent"]
    #[doc = " change of times after a cache flush)."]
    #[doc = ""]
    #[doc = " To prevent this problem, this variable can be used to inform the"]
    #[doc = " kernel about the timestamp granularity supported by the file-system."]
    #[doc = " The value should be power of 10.  The default is 1, i.e. full"]
    #[doc = " nano-second resolution. Filesystems supporting only second resolution"]
    #[doc = " should set this to 1000000000."]
    pub time_gran: ::std::os::raw::c_uint,
    #[doc = " For future use."]
    pub reserved: [::std::os::raw::c_uint; 22usize],
}
#[test]
fn bindgen_test_layout_fuse_conn_info() {
    assert_eq!(
        ::std::mem::size_of::<fuse_conn_info>(),
        128usize,
        concat!("Size of: ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_conn_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).proto_major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).proto_minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_write as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_read as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_readahead as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_readahead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).capable as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(capable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).want as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(want)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).max_background as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fuse_conn_info>())).congestion_threshold as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(congestion_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).time_gran as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(time_gran)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_conn_info>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_pollhandle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_conn_info_opts {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " This function parses several command-line options that can be used"]
    #[doc = " to override elements of struct fuse_conn_info. The pointer returned"]
    #[doc = " by this function should be passed to the"]
    #[doc = " fuse_apply_conn_info_opts() method by the file system's init()"]
    #[doc = " handler."]
    #[doc = ""]
    #[doc = " Before using this function, think twice if you really want these"]
    #[doc = " parameters to be adjustable from the command line. In most cases,"]
    #[doc = " they should be determined by the file system internally."]
    #[doc = ""]
    #[doc = " The following options are recognized:"]
    #[doc = ""]
    #[doc = "   -o max_write=N         sets conn->max_write"]
    #[doc = "   -o max_readahead=N     sets conn->max_readahead"]
    #[doc = "   -o max_background=N    sets conn->max_background"]
    #[doc = "   -o congestion_threshold=N  sets conn->congestion_threshold"]
    #[doc = "   -o async_read          sets FUSE_CAP_ASYNC_READ in conn->want"]
    #[doc = "   -o sync_read           unsets FUSE_CAP_ASYNC_READ in conn->want"]
    #[doc = "   -o atomic_o_trunc      sets FUSE_CAP_ATOMIC_O_TRUNC in conn->want"]
    #[doc = "   -o no_remote_lock      Equivalent to -o no_remote_flock,no_remote_posix_lock"]
    #[doc = "   -o no_remote_flock     Unsets FUSE_CAP_FLOCK_LOCKS in conn->want"]
    #[doc = "   -o no_remote_posix_lock  Unsets FUSE_CAP_POSIX_LOCKS in conn->want"]
    #[doc = "   -o [no_]splice_write     (un-)sets FUSE_CAP_SPLICE_WRITE in conn->want"]
    #[doc = "   -o [no_]splice_move      (un-)sets FUSE_CAP_SPLICE_MOVE in conn->want"]
    #[doc = "   -o [no_]splice_read      (un-)sets FUSE_CAP_SPLICE_READ in conn->want"]
    #[doc = "   -o [no_]auto_inval_data  (un-)sets FUSE_CAP_AUTO_INVAL_DATA in conn->want"]
    #[doc = "   -o readdirplus=no        unsets FUSE_CAP_READDIRPLUS in conn->want"]
    #[doc = "   -o readdirplus=yes       sets FUSE_CAP_READDIRPLUS and unsets"]
    #[doc = "                            FUSE_CAP_READDIRPLUS_AUTO in conn->want"]
    #[doc = "   -o readdirplus=auto      sets FUSE_CAP_READDIRPLUS and"]
    #[doc = "                            FUSE_CAP_READDIRPLUS_AUTO in conn->want"]
    #[doc = "   -o [no_]async_dio        (un-)sets FUSE_CAP_ASYNC_DIO in conn->want"]
    #[doc = "   -o [no_]writeback_cache  (un-)sets FUSE_CAP_WRITEBACK_CACHE in conn->want"]
    #[doc = "   -o time_gran=N           sets conn->time_gran"]
    #[doc = ""]
    #[doc = " Known options will be removed from *args*, unknown options will be"]
    #[doc = " passed through unchanged."]
    #[doc = ""]
    #[doc = " @param args argument vector (input+output)"]
    #[doc = " @return parsed options"]
    pub fn fuse_parse_conn_info_opts(args: *mut fuse_args) -> *mut fuse_conn_info_opts;
}
extern "C" {
    #[doc = " This function applies the (parsed) parameters in *opts* to the"]
    #[doc = " *conn* pointer. It may modify the following fields: wants,"]
    #[doc = " max_write, max_readahead, congestion_threshold, max_background,"]
    #[doc = " time_gran. A field is only set (or unset) if the corresponding"]
    #[doc = " option has been explicitly set."]
    pub fn fuse_apply_conn_info_opts(opts: *mut fuse_conn_info_opts, conn: *mut fuse_conn_info);
}
extern "C" {
    #[doc = " Go into the background"]
    #[doc = ""]
    #[doc = " @param foreground if true, stay in the foreground"]
    #[doc = " @return 0 on success, -1 on failure"]
    pub fn fuse_daemonize(foreground: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the version of the library"]
    #[doc = ""]
    #[doc = " @return the version"]
    pub fn fuse_version() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the full package version string of the library"]
    #[doc = ""]
    #[doc = " @return the package version"]
    pub fn fuse_pkgversion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Destroy poll handle"]
    #[doc = ""]
    #[doc = " @param ph the poll handle"]
    pub fn fuse_pollhandle_destroy(ph: *mut fuse_pollhandle);
}
#[doc = " Buffer contains a file descriptor"]
#[doc = ""]
#[doc = " If this flag is set, the .fd field is valid, otherwise the"]
#[doc = " .mem fields is valid."]
pub const fuse_buf_flags_FUSE_BUF_IS_FD: fuse_buf_flags = 2;
#[doc = " Seek on the file descriptor"]
#[doc = ""]
#[doc = " If this flag is set then the .pos field is valid and is"]
#[doc = " used to seek to the given offset before performing"]
#[doc = " operation on file descriptor."]
pub const fuse_buf_flags_FUSE_BUF_FD_SEEK: fuse_buf_flags = 4;
#[doc = " Retry operation on file descriptor"]
#[doc = ""]
#[doc = " If this flag is set then retry operation on file descriptor"]
#[doc = " until .size bytes have been copied or an error or EOF is"]
#[doc = " detected."]
pub const fuse_buf_flags_FUSE_BUF_FD_RETRY: fuse_buf_flags = 8;
#[doc = " Buffer flags"]
pub type fuse_buf_flags = u32;
#[doc = " Don't use splice(2)"]
#[doc = ""]
#[doc = " Always fall back to using read and write instead of"]
#[doc = " splice(2) to copy data from one file descriptor to another."]
#[doc = ""]
#[doc = " If this flag is not set, then only fall back if splice is"]
#[doc = " unavailable."]
pub const fuse_buf_copy_flags_FUSE_BUF_NO_SPLICE: fuse_buf_copy_flags = 2;
#[doc = " Force splice"]
#[doc = ""]
#[doc = " Always use splice(2) to copy data from one file descriptor"]
#[doc = " to another.  If splice is not available, return -EINVAL."]
pub const fuse_buf_copy_flags_FUSE_BUF_FORCE_SPLICE: fuse_buf_copy_flags = 4;
#[doc = " Try to move data with splice."]
#[doc = ""]
#[doc = " If splice is used, try to move pages from the source to the"]
#[doc = " destination instead of copying.  See documentation of"]
#[doc = " SPLICE_F_MOVE in splice(2) man page."]
pub const fuse_buf_copy_flags_FUSE_BUF_SPLICE_MOVE: fuse_buf_copy_flags = 8;
#[doc = " Don't block on the pipe when copying data with splice"]
#[doc = ""]
#[doc = " Makes the operations on the pipe non-blocking (if the pipe"]
#[doc = " is full or empty).  See SPLICE_F_NONBLOCK in the splice(2)"]
#[doc = " man page."]
pub const fuse_buf_copy_flags_FUSE_BUF_SPLICE_NONBLOCK: fuse_buf_copy_flags = 16;
#[doc = " Buffer copy flags"]
pub type fuse_buf_copy_flags = u32;
#[doc = " Single data buffer"]
#[doc = ""]
#[doc = " Generic data buffer for I/O, extended attributes, etc...  Data may"]
#[doc = " be supplied as a memory pointer or as a file descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_buf {
    #[doc = " Size of data in bytes"]
    pub size: usize,
    #[doc = " Buffer flags"]
    pub flags: fuse_buf_flags,
    #[doc = " Memory pointer"]
    #[doc = ""]
    #[doc = " Used unless FUSE_BUF_IS_FD flag is set."]
    pub mem: *mut ::std::os::raw::c_void,
    #[doc = " File descriptor"]
    #[doc = ""]
    #[doc = " Used if FUSE_BUF_IS_FD flag is set."]
    pub fd: ::std::os::raw::c_int,
    #[doc = " File position"]
    #[doc = ""]
    #[doc = " Used if FUSE_BUF_FD_SEEK flag is set."]
    pub pos: off_t,
}
#[test]
fn bindgen_test_layout_fuse_buf() {
    assert_eq!(
        ::std::mem::size_of::<fuse_buf>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).mem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).fd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_buf>())).pos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_buf),
            "::",
            stringify!(pos)
        )
    );
}
#[doc = " Data buffer vector"]
#[doc = ""]
#[doc = " An array of data buffers, each containing a memory pointer or a"]
#[doc = " file descriptor."]
#[doc = ""]
#[doc = " Allocate dynamically to add more than one buffer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bufvec {
    #[doc = " Number of buffers in the array"]
    pub count: usize,
    #[doc = " Index of current buffer within the array"]
    pub idx: usize,
    #[doc = " Current offset within the current buffer"]
    pub off: usize,
    #[doc = " Array of buffers"]
    pub buf: [fuse_buf; 1usize],
}
#[test]
fn bindgen_test_layout_fuse_bufvec() {
    assert_eq!(
        ::std::mem::size_of::<fuse_bufvec>(),
        64usize,
        concat!("Size of: ", stringify!(fuse_bufvec))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bufvec>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bufvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).off as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_bufvec>())).buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bufvec),
            "::",
            stringify!(buf)
        )
    );
}
extern "C" {
    #[doc = " Get total size of data in a fuse buffer vector"]
    #[doc = ""]
    #[doc = " @param bufv buffer vector"]
    #[doc = " @return size of data"]
    pub fn fuse_buf_size(bufv: *const fuse_bufvec) -> usize;
}
extern "C" {
    #[doc = " Copy data from one buffer vector to another"]
    #[doc = ""]
    #[doc = " @param dst destination buffer vector"]
    #[doc = " @param src source buffer vector"]
    #[doc = " @param flags flags controlling the copy"]
    #[doc = " @return actual number of bytes copied or -errno on error"]
    pub fn fuse_buf_copy(
        dst: *mut fuse_bufvec,
        src: *mut fuse_bufvec,
        flags: fuse_buf_copy_flags,
    ) -> isize;
}
extern "C" {
    #[doc = " Exit session on HUP, TERM and INT signals and ignore PIPE signal"]
    #[doc = ""]
    #[doc = " Stores session in a global variable.\t May only be called once per"]
    #[doc = " process until fuse_remove_signal_handlers() is called."]
    #[doc = ""]
    #[doc = " Once either of the POSIX signals arrives, the signal handler calls"]
    #[doc = " fuse_session_exit()."]
    #[doc = ""]
    #[doc = " @param se the session to exit"]
    #[doc = " @return 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " See also:"]
    #[doc = " fuse_remove_signal_handlers()"]
    pub fn fuse_set_signal_handlers(se: *mut fuse_session) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Restore default signal handlers"]
    #[doc = ""]
    #[doc = " Resets global session.  After this fuse_set_signal_handlers() may"]
    #[doc = " be called again."]
    #[doc = ""]
    #[doc = " @param se the same session as given in fuse_set_signal_handlers()"]
    #[doc = ""]
    #[doc = " See also:"]
    #[doc = " fuse_set_signal_handlers()"]
    pub fn fuse_remove_signal_handlers(se: *mut fuse_session);
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _fuse_off_t_must_be_64bit_dummy_struct {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout__fuse_off_t_must_be_64bit_dummy_struct() {
    assert_eq!(
        ::std::mem::size_of::<_fuse_off_t_must_be_64bit_dummy_struct>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_fuse_off_t_must_be_64bit_dummy_struct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_fuse_off_t_must_be_64bit_dummy_struct>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_fuse_off_t_must_be_64bit_dummy_struct)
        )
    );
}
impl _fuse_off_t_must_be_64bit_dummy_struct {
    #[inline]
    pub fn _fuse_off_t_must_be_64bit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__fuse_off_t_must_be_64bit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _fuse_off_t_must_be_64bit: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let _fuse_off_t_must_be_64bit: u32 =
                unsafe { ::std::mem::transmute(_fuse_off_t_must_be_64bit) };
            _fuse_off_t_must_be_64bit as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __lxstat(
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fxstatat(
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: __fsblkcnt_t,
    pub f_bfree: __fsblkcnt_t,
    pub f_bavail: __fsblkcnt_t,
    pub f_files: __fsfilcnt_t,
    pub f_ffree: __fsfilcnt_t,
    pub f_favail: __fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
    pub __f_spare: [::std::os::raw::c_int; 6usize],
}
#[test]
fn bindgen_test_layout_statvfs() {
    assert_eq!(
        ::std::mem::size_of::<statvfs>(),
        112usize,
        concat!("Size of: ", stringify!(statvfs))
    );
    assert_eq!(
        ::std::mem::align_of::<statvfs>(),
        8usize,
        concat!("Alignment of ", stringify!(statvfs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_bsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_frsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_frsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_blocks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_bfree as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_bavail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_files as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_ffree as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_favail as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_favail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_fsid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_flag as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).f_namemax as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_namemax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statvfs>())).__f_spare as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(__f_spare)
        )
    );
}
pub const ST_RDONLY: _bindgen_ty_1 = 1;
pub const ST_NOSUID: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn statvfs(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatvfs(__fildes: ::std::os::raw::c_int, __buf: *mut statvfs) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
#[doc = " Handle for a FUSE filesystem"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse {
    _unused: [u8; 0],
}
#[doc = " \"Plus\" mode."]
#[doc = ""]
#[doc = " The kernel wants to prefill the inode cache during readdir.  The"]
#[doc = " filesystem may honour this by filling in the attributes and setting"]
#[doc = " FUSE_FILL_DIR_FLAGS for the filler function.  The filesystem may also"]
#[doc = " just ignore this flag completely."]
pub const fuse_readdir_flags_FUSE_READDIR_PLUS: fuse_readdir_flags = 1;
#[doc = " Readdir flags, passed to ->readdir()"]
pub type fuse_readdir_flags = u32;
#[doc = " \"Plus\" mode: all file attributes are valid"]
#[doc = ""]
#[doc = " The attributes are used by the kernel to prefill the inode cache"]
#[doc = " during a readdir."]
#[doc = ""]
#[doc = " It is okay to set FUSE_FILL_DIR_PLUS if FUSE_READDIR_PLUS is not set"]
#[doc = " and vice versa."]
pub const fuse_fill_dir_flags_FUSE_FILL_DIR_PLUS: fuse_fill_dir_flags = 2;
pub type fuse_fill_dir_flags = u32;
#[doc = " Function to add an entry in a readdir() operation"]
#[doc = ""]
#[doc = " The *off* parameter can be any non-zero value that enables the"]
#[doc = " filesystem to identify the current point in the directory"]
#[doc = " stream. It does not need to be the actual physical position. A"]
#[doc = " value of zero is reserved to indicate that seeking in directories"]
#[doc = " is not supported."]
#[doc = ""]
#[doc = " @param buf the buffer passed to the readdir() operation"]
#[doc = " @param name the file name of the directory entry"]
#[doc = " @param stat file attributes, can be NULL"]
#[doc = " @param off offset of the next entry or zero"]
#[doc = " @param flags fill flags"]
#[doc = " @return 1 if buffer is full, zero otherwise"]
pub type fuse_fill_dir_t = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        stbuf: *const stat,
        off: off_t,
        flags: fuse_fill_dir_flags,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " Configuration of the high-level API"]
#[doc = ""]
#[doc = " This structure is initialized from the arguments passed to"]
#[doc = " fuse_new(), and then passed to the file system's init() handler"]
#[doc = " which should ensure that the configuration is compatible with the"]
#[doc = " file system implementation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_config {
    #[doc = " If `set_gid` is non-zero, the st_gid attribute of each file"]
    #[doc = " is overwritten with the value of `gid`."]
    pub set_gid: ::std::os::raw::c_int,
    pub gid: ::std::os::raw::c_uint,
    #[doc = " If `set_uid` is non-zero, the st_uid attribute of each file"]
    #[doc = " is overwritten with the value of `uid`."]
    pub set_uid: ::std::os::raw::c_int,
    pub uid: ::std::os::raw::c_uint,
    #[doc = " If `set_mode` is non-zero, the any permissions bits set in"]
    #[doc = " `umask` are unset in the st_mode attribute of each file."]
    pub set_mode: ::std::os::raw::c_int,
    pub umask: ::std::os::raw::c_uint,
    #[doc = " The timeout in seconds for which name lookups will be"]
    #[doc = " cached."]
    pub entry_timeout: f64,
    #[doc = " The timeout in seconds for which a negative lookup will be"]
    #[doc = " cached. This means, that if file did not exist (lookup"]
    #[doc = " retuned ENOENT), the lookup will only be redone after the"]
    #[doc = " timeout, and the file/directory will be assumed to not"]
    #[doc = " exist until then. A value of zero means that negative"]
    #[doc = " lookups are not cached."]
    pub negative_timeout: f64,
    #[doc = " The timeout in seconds for which file/directory attributes"]
    #[doc = " (as returned by e.g. the `getattr` handler) are cached."]
    pub attr_timeout: f64,
    #[doc = " Allow requests to be interrupted"]
    pub intr: ::std::os::raw::c_int,
    #[doc = " Specify which signal number to send to the filesystem when"]
    #[doc = " a request is interrupted.  The default is hardcoded to"]
    #[doc = " USR1."]
    pub intr_signal: ::std::os::raw::c_int,
    #[doc = " Normally, FUSE assigns inodes to paths only for as long as"]
    #[doc = " the kernel is aware of them. With this option inodes are"]
    #[doc = " instead remembered for at least this many seconds.  This"]
    #[doc = " will require more memory, but may be necessary when using"]
    #[doc = " applications that make use of inode numbers."]
    #[doc = ""]
    #[doc = " A number of -1 means that inodes will be remembered for the"]
    #[doc = " entire life-time of the file-system process."]
    pub remember: ::std::os::raw::c_int,
    #[doc = " The default behavior is that if an open file is deleted,"]
    #[doc = " the file is renamed to a hidden file (.fuse_hiddenXXX), and"]
    #[doc = " only removed when the file is finally released.  This"]
    #[doc = " relieves the filesystem implementation of having to deal"]
    #[doc = " with this problem. This option disables the hiding"]
    #[doc = " behavior, and files are removed immediately in an unlink"]
    #[doc = " operation (or in a rename operation which overwrites an"]
    #[doc = " existing file)."]
    #[doc = ""]
    #[doc = " It is recommended that you not use the hard_remove"]
    #[doc = " option. When hard_remove is set, the following libc"]
    #[doc = " functions fail on unlinked files (returning errno of"]
    #[doc = " ENOENT): read(2), write(2), fsync(2), close(2), f*xattr(2),"]
    #[doc = " ftruncate(2), fstat(2), fchmod(2), fchown(2)"]
    pub hard_remove: ::std::os::raw::c_int,
    #[doc = " Honor the st_ino field in the functions getattr() and"]
    #[doc = " fill_dir(). This value is used to fill in the st_ino field"]
    #[doc = " in the stat(2), lstat(2), fstat(2) functions and the d_ino"]
    #[doc = " field in the readdir(2) function. The filesystem does not"]
    #[doc = " have to guarantee uniqueness, however some applications"]
    #[doc = " rely on this value being unique for the whole filesystem."]
    #[doc = ""]
    #[doc = " Note that this does *not* affect the inode that libfuse"]
    #[doc = " and the kernel use internally (also called the \"nodeid\")."]
    pub use_ino: ::std::os::raw::c_int,
    #[doc = " If use_ino option is not given, still try to fill in the"]
    #[doc = " d_ino field in readdir(2). If the name was previously"]
    #[doc = " looked up, and is still in the cache, the inode number"]
    #[doc = " found there will be used.  Otherwise it will be set to -1."]
    #[doc = " If use_ino option is given, this option is ignored."]
    pub readdir_ino: ::std::os::raw::c_int,
    #[doc = " This option disables the use of page cache (file content cache)"]
    #[doc = " in the kernel for this filesystem. This has several affects:"]
    #[doc = ""]
    #[doc = " 1. Each read(2) or write(2) system call will initiate one"]
    #[doc = "    or more read or write operations, data will not be"]
    #[doc = "    cached in the kernel."]
    #[doc = ""]
    #[doc = " 2. The return value of the read() and write() system calls"]
    #[doc = "    will correspond to the return values of the read and"]
    #[doc = "    write operations. This is useful for example if the"]
    #[doc = "    file size is not known in advance (before reading it)."]
    #[doc = ""]
    #[doc = " Internally, enabling this option causes fuse to set the"]
    #[doc = " `direct_io` field of `struct fuse_file_info` - overwriting"]
    #[doc = " any value that was put there by the file system."]
    pub direct_io: ::std::os::raw::c_int,
    #[doc = " This option disables flushing the cache of the file"]
    #[doc = " contents on every open(2).  This should only be enabled on"]
    #[doc = " filesystems where the file data is never changed"]
    #[doc = " externally (not through the mounted FUSE filesystem).  Thus"]
    #[doc = " it is not suitable for network filesystems and other"]
    #[doc = " intermediate filesystems."]
    #[doc = ""]
    #[doc = " NOTE: if this option is not specified (and neither"]
    #[doc = " direct_io) data is still cached after the open(2), so a"]
    #[doc = " read(2) system call will not always initiate a read"]
    #[doc = " operation."]
    #[doc = ""]
    #[doc = " Internally, enabling this option causes fuse to set the"]
    #[doc = " `keep_cache` field of `struct fuse_file_info` - overwriting"]
    #[doc = " any value that was put there by the file system."]
    pub kernel_cache: ::std::os::raw::c_int,
    #[doc = " This option is an alternative to `kernel_cache`. Instead of"]
    #[doc = " unconditionally keeping cached data, the cached data is"]
    #[doc = " invalidated on open(2) if if the modification time or the"]
    #[doc = " size of the file has changed since it was last opened."]
    pub auto_cache: ::std::os::raw::c_int,
    #[doc = " The timeout in seconds for which file attributes are cached"]
    #[doc = " for the purpose of checking if auto_cache should flush the"]
    #[doc = " file data on open."]
    pub ac_attr_timeout_set: ::std::os::raw::c_int,
    pub ac_attr_timeout: f64,
    #[doc = " If this option is given the file-system handlers for the"]
    #[doc = " following operations will not receive path information:"]
    #[doc = " read, write, flush, release, fsync, readdir, releasedir,"]
    #[doc = " fsyncdir, lock, ioctl and poll."]
    #[doc = ""]
    #[doc = " For the truncate, getattr, chmod, chown and utimens"]
    #[doc = " operations the path will be provided only if the struct"]
    #[doc = " fuse_file_info argument is NULL."]
    pub nullpath_ok: ::std::os::raw::c_int,
    #[doc = " The remaining options are used by libfuse internally and"]
    #[doc = " should not be touched."]
    pub show_help: ::std::os::raw::c_int,
    pub modules: *mut ::std::os::raw::c_char,
    pub debug: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_config() {
    assert_eq!(
        ::std::mem::size_of::<fuse_config>(),
        120usize,
        concat!("Size of: ", stringify!(fuse_config))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_config>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).set_gid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(set_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).gid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).set_uid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(set_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).set_mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(set_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).umask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(umask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).entry_timeout as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(entry_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).negative_timeout as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(negative_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).attr_timeout as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(attr_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).intr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(intr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).intr_signal as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(intr_signal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).remember as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(remember)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).hard_remove as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(hard_remove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).use_ino as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(use_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).readdir_ino as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(readdir_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).direct_io as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(direct_io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).kernel_cache as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(kernel_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).auto_cache as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(auto_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).ac_attr_timeout_set as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(ac_attr_timeout_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).ac_attr_timeout as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(ac_attr_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).nullpath_ok as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(nullpath_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).show_help as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(show_help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).modules as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(modules)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_config>())).debug as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_config),
            "::",
            stringify!(debug)
        )
    );
}
#[doc = " The file system operations:"]
#[doc = ""]
#[doc = " Most of these should work very similarly to the well known UNIX"]
#[doc = " file system operations.  A major exception is that instead of"]
#[doc = " returning an error in 'errno', the operation should return the"]
#[doc = " negated error value (-errno) directly."]
#[doc = ""]
#[doc = " All methods are optional, but some are essential for a useful"]
#[doc = " filesystem (e.g. getattr).  Open, flush, release, fsync, opendir,"]
#[doc = " releasedir, fsyncdir, access, create, truncate, lock, init and"]
#[doc = " destroy are special purpose methods, without which a full featured"]
#[doc = " filesystem can still be implemented."]
#[doc = ""]
#[doc = " In general, all methods are expected to perform any necessary"]
#[doc = " permission checking. However, a filesystem may delegate this task"]
#[doc = " to the kernel by passing the `default_permissions` mount option to"]
#[doc = " `fuse_new()`. In this case, methods will only be called if"]
#[doc = " the kernel's permission check has succeeded."]
#[doc = ""]
#[doc = " Almost all operations take a path which can be of any length."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations {
    #[doc = " Get file attributes."]
    #[doc = ""]
    #[doc = " Similar to stat().  The 'st_dev' and 'st_blksize' fields are"]
    #[doc = " ignored. The 'st_ino' field is ignored except if the 'use_ino'"]
    #[doc = " mount option is given. In that case it is passed to userspace,"]
    #[doc = " but libfuse and the kernel will still assign a different"]
    #[doc = " inode for internal use (called the \"nodeid\")."]
    #[doc = ""]
    #[doc = " `fi` will always be NULL if the file is not currently open, but"]
    #[doc = " may also be NULL if the file is open."]
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
            fi: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Read the target of a symbolic link"]
    #[doc = ""]
    #[doc = " The buffer should be filled with a null terminated string.  The"]
    #[doc = " buffer size argument includes the space for the terminating"]
    #[doc = " null character.\tIf the linkname is too long to fit in the"]
    #[doc = " buffer, it should be truncated.\tThe return value should be 0"]
    #[doc = " for success."]
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Create a file node"]
    #[doc = ""]
    #[doc = " This is called for creation of all non-directory, non-symlink"]
    #[doc = " nodes.  If the filesystem defines a create() method, then for"]
    #[doc = " regular files that will be called instead."]
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Create a directory"]
    #[doc = ""]
    #[doc = " Note that the mode argument may not have the type specification"]
    #[doc = " bits set, i.e. S_ISDIR(mode) can be false.  To obtain the"]
    #[doc = " correct directory type bits use  mode|S_IFDIR"]
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Remove a file"]
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    #[doc = " Remove a directory"]
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    #[doc = " Create a symbolic link"]
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Rename a file"]
    #[doc = ""]
    #[doc = " *flags* may be `RENAME_EXCHANGE` or `RENAME_NOREPLACE`. If"]
    #[doc = " RENAME_NOREPLACE is specified, the filesystem must not"]
    #[doc = " overwrite *newname* if it exists and return an error"]
    #[doc = " instead. If `RENAME_EXCHANGE` is specified, the filesystem"]
    #[doc = " must atomically exchange the two files, i.e. both must"]
    #[doc = " exist and neither may be deleted."]
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Create a hard link to a file"]
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Change the permission bits of a file"]
    #[doc = ""]
    #[doc = " `fi` will always be NULL if the file is not currenlty open, but"]
    #[doc = " may also be NULL if the file is open."]
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            fi: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Change the owner and group of a file"]
    #[doc = ""]
    #[doc = " `fi` will always be NULL if the file is not currenlty open, but"]
    #[doc = " may also be NULL if the file is open."]
    #[doc = ""]
    #[doc = " Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is"]
    #[doc = " expected to reset the setuid and setgid bits."]
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
            fi: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Change the size of a file"]
    #[doc = ""]
    #[doc = " `fi` will always be NULL if the file is not currenlty open, but"]
    #[doc = " may also be NULL if the file is open."]
    #[doc = ""]
    #[doc = " Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is"]
    #[doc = " expected to reset the setuid and setgid bits."]
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
            fi: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Open a file"]
    #[doc = ""]
    #[doc = " Open flags are available in fi->flags. The following rules"]
    #[doc = " apply."]
    #[doc = ""]
    #[doc = "  - Creation (O_CREAT, O_EXCL, O_NOCTTY) flags will be"]
    #[doc = "    filtered out / handled by the kernel."]
    #[doc = ""]
    #[doc = "  - Access modes (O_RDONLY, O_WRONLY, O_RDWR, O_EXEC, O_SEARCH)"]
    #[doc = "    should be used by the filesystem to check if the operation is"]
    #[doc = "    permitted.  If the ``-o default_permissions`` mount option is"]
    #[doc = "    given, this check is already done by the kernel before calling"]
    #[doc = "    open() and may thus be omitted by the filesystem."]
    #[doc = ""]
    #[doc = "  - When writeback caching is enabled, the kernel may send"]
    #[doc = "    read requests even for files opened with O_WRONLY. The"]
    #[doc = "    filesystem should be prepared to handle this."]
    #[doc = ""]
    #[doc = "  - When writeback caching is disabled, the filesystem is"]
    #[doc = "    expected to properly handle the O_APPEND flag and ensure"]
    #[doc = "    that each write is appending to the end of the file."]
    #[doc = ""]
    #[doc = "  - When writeback caching is enabled, the kernel will"]
    #[doc = "    handle O_APPEND. However, unless all changes to the file"]
    #[doc = "    come through the kernel this will not work reliably. The"]
    #[doc = "    filesystem should thus either ignore the O_APPEND flag"]
    #[doc = "    (and let the kernel handle it), or return an error"]
    #[doc = "    (indicating that reliably O_APPEND is not available)."]
    #[doc = ""]
    #[doc = " Filesystem may store an arbitrary file handle (pointer,"]
    #[doc = " index, etc) in fi->fh, and use this in other all other file"]
    #[doc = " operations (read, write, flush, release, fsync)."]
    #[doc = ""]
    #[doc = " Filesystem may also implement stateless file I/O and not store"]
    #[doc = " anything in fi->fh."]
    #[doc = ""]
    #[doc = " There are also some flags (direct_io, keep_cache) which the"]
    #[doc = " filesystem may set in fi, to change the way the file is opened."]
    #[doc = " See fuse_file_info structure in <fuse_common.h> for more details."]
    #[doc = ""]
    #[doc = " If this request is answered with an error code of ENOSYS"]
    #[doc = " and FUSE_CAP_NO_OPEN_SUPPORT is set in"]
    #[doc = " `fuse_conn_info.capable`, this is treated as success and"]
    #[doc = " future calls to open will also succeed without being send"]
    #[doc = " to the filesystem process."]
    #[doc = ""]
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Read data from an open file"]
    #[doc = ""]
    #[doc = " Read should return exactly the number of bytes requested except"]
    #[doc = " on EOF or error, otherwise the rest of the data will be"]
    #[doc = " substituted with zeroes.\t An exception to this is when the"]
    #[doc = " 'direct_io' mount option is specified, in which case the return"]
    #[doc = " value of the read system call will reflect the return value of"]
    #[doc = " this operation."]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Write data to an open file"]
    #[doc = ""]
    #[doc = " Write should return exactly the number of bytes requested"]
    #[doc = " except on error.\t An exception to this is when the 'direct_io'"]
    #[doc = " mount option is specified (see read operation)."]
    #[doc = ""]
    #[doc = " Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is"]
    #[doc = " expected to reset the setuid and setgid bits."]
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Get file system statistics"]
    #[doc = ""]
    #[doc = " The 'f_favail', 'f_fsid' and 'f_flag' fields are ignored"]
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut statvfs,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Possibly flush cached data"]
    #[doc = ""]
    #[doc = " BIG NOTE: This is not equivalent to fsync().  It's not a"]
    #[doc = " request to sync dirty data."]
    #[doc = ""]
    #[doc = " Flush is called on each close() of a file descriptor, as opposed to"]
    #[doc = " release which is called on the close of the last file descriptor for"]
    #[doc = " a file.  Under Linux, errors returned by flush() will be passed to"]
    #[doc = " userspace as errors from close(), so flush() is a good place to write"]
    #[doc = " back any cached dirty data. However, many applications ignore errors"]
    #[doc = " on close(), and on non-Linux systems, close() may succeed even if flush()"]
    #[doc = " returns an error. For these reasons, filesystems should not assume"]
    #[doc = " that errors returned by flush will ever be noticed or even"]
    #[doc = " delivered."]
    #[doc = ""]
    #[doc = " NOTE: The flush() method may be called more than once for each"]
    #[doc = " open().  This happens if more than one file descriptor refers to an"]
    #[doc = " open file handle, e.g. due to dup(), dup2() or fork() calls.  It is"]
    #[doc = " not possible to determine if a flush is final, so each flush should"]
    #[doc = " be treated equally.  Multiple write-flush sequences are relatively"]
    #[doc = " rare, so this shouldn't be a problem."]
    #[doc = ""]
    #[doc = " Filesystems shouldn't assume that flush will be called at any"]
    #[doc = " particular point.  It may be called more times than expected, or not"]
    #[doc = " at all."]
    #[doc = ""]
    #[doc = " [close]: http://pubs.opengroup.org/onlinepubs/9699919799/functions/close.html"]
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Release an open file"]
    #[doc = ""]
    #[doc = " Release is called when there are no more references to an open"]
    #[doc = " file: all file descriptors are closed and all memory mappings"]
    #[doc = " are unmapped."]
    #[doc = ""]
    #[doc = " For every open() call there will be exactly one release() call"]
    #[doc = " with the same flags and file handle.  It is possible to"]
    #[doc = " have a file opened more than once, in which case only the last"]
    #[doc = " release will mean, that no more reads/writes will happen on the"]
    #[doc = " file.  The return value of release is ignored."]
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Synchronize file contents"]
    #[doc = ""]
    #[doc = " If the datasync parameter is non-zero, then only the user data"]
    #[doc = " should be flushed, not the meta data."]
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Set extended attributes"]
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Get extended attributes"]
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " List extended attributes"]
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Remove extended attributes"]
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Open directory"]
    #[doc = ""]
    #[doc = " Unless the 'default_permissions' mount option is given,"]
    #[doc = " this method should check if opendir is permitted for this"]
    #[doc = " directory. Optionally opendir may also return an arbitrary"]
    #[doc = " filehandle in the fuse_file_info structure, which will be"]
    #[doc = " passed to readdir, releasedir and fsyncdir."]
    pub opendir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Read directory"]
    #[doc = ""]
    #[doc = " The filesystem may choose between two modes of operation:"]
    #[doc = ""]
    #[doc = " 1) The readdir implementation ignores the offset parameter, and"]
    #[doc = " passes zero to the filler function's offset.  The filler"]
    #[doc = " function will not return '1' (unless an error happens), so the"]
    #[doc = " whole directory is read in a single readdir operation."]
    #[doc = ""]
    #[doc = " 2) The readdir implementation keeps track of the offsets of the"]
    #[doc = " directory entries.  It uses the offset parameter and always"]
    #[doc = " passes non-zero offset to the filler function.  When the buffer"]
    #[doc = " is full (or an error happens) the filler function will return"]
    #[doc = " '1'."]
    pub readdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
            arg3: fuse_fill_dir_t,
            arg4: off_t,
            arg5: *mut fuse_file_info,
            arg6: fuse_readdir_flags,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Release directory"]
    pub releasedir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Synchronize directory contents"]
    #[doc = ""]
    #[doc = " If the datasync parameter is non-zero, then only the user data"]
    #[doc = " should be flushed, not the meta data"]
    pub fsyncdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Initialize filesystem"]
    #[doc = ""]
    #[doc = " The return value will passed in the `private_data` field of"]
    #[doc = " `struct fuse_context` to all file operations, and as a"]
    #[doc = " parameter to the destroy() method. It overrides the initial"]
    #[doc = " value provided to fuse_main() / fuse_new()."]
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            conn: *mut fuse_conn_info,
            cfg: *mut fuse_config,
        ) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " Clean up filesystem"]
    #[doc = ""]
    #[doc = " Called on filesystem exit."]
    pub destroy:
        ::std::option::Option<unsafe extern "C" fn(private_data: *mut ::std::os::raw::c_void)>,
    #[doc = " Check file access permissions"]
    #[doc = ""]
    #[doc = " This will be called for the access() system call.  If the"]
    #[doc = " 'default_permissions' mount option is given, this method is not"]
    #[doc = " called."]
    #[doc = ""]
    #[doc = " This method is not called under Linux kernel versions 2.4.x"]
    pub access: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Create and open a file"]
    #[doc = ""]
    #[doc = " If the file does not exist, first create it with the specified"]
    #[doc = " mode, and then open it."]
    #[doc = ""]
    #[doc = " If this method is not implemented or under Linux kernel"]
    #[doc = " versions earlier than 2.6.15, the mknod() and open() methods"]
    #[doc = " will be called instead."]
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Perform POSIX file locking operation"]
    #[doc = ""]
    #[doc = " The cmd argument will be either F_GETLK, F_SETLK or F_SETLKW."]
    #[doc = ""]
    #[doc = " For the meaning of fields in 'struct flock' see the man page"]
    #[doc = " for fcntl(2).  The l_whence field will always be set to"]
    #[doc = " SEEK_SET."]
    #[doc = ""]
    #[doc = " For checking lock ownership, the 'fuse_file_info->owner'"]
    #[doc = " argument must be used."]
    #[doc = ""]
    #[doc = " For F_GETLK operation, the library will first check currently"]
    #[doc = " held locks, and if a conflicting lock is found it will return"]
    #[doc = " information without calling this method.\t This ensures, that"]
    #[doc = " for local locks the l_pid field is correctly filled in.\tThe"]
    #[doc = " results may not be accurate in case of race conditions and in"]
    #[doc = " the presence of hard links, but it's unlikely that an"]
    #[doc = " application would rely on accurate GETLK results in these"]
    #[doc = " cases.  If a conflicting lock is not found, this method will be"]
    #[doc = " called, and the filesystem may fill out l_pid by a meaningful"]
    #[doc = " value, or it may leave this field zero."]
    #[doc = ""]
    #[doc = " For F_SETLK and F_SETLKW the l_pid field will be set to the pid"]
    #[doc = " of the process performing the locking operation."]
    #[doc = ""]
    #[doc = " Note: if this method is not implemented, the kernel will still"]
    #[doc = " allow file locking to work locally.  Hence it is only"]
    #[doc = " interesting for network filesystems and similar."]
    pub lock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            cmd: ::std::os::raw::c_int,
            arg3: *mut flock,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Change the access and modification times of a file with"]
    #[doc = " nanosecond resolution"]
    #[doc = ""]
    #[doc = " This supersedes the old utime() interface.  New applications"]
    #[doc = " should use this."]
    #[doc = ""]
    #[doc = " `fi` will always be NULL if the file is not currenlty open, but"]
    #[doc = " may also be NULL if the file is open."]
    #[doc = ""]
    #[doc = " See the utimensat(2) man page for details."]
    pub utimens: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            tv: *const timespec,
            fi: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Map block index within file to block index within device"]
    #[doc = ""]
    #[doc = " Note: This makes sense only for block device backed filesystems"]
    #[doc = " mounted with the 'blkdev' option"]
    pub bmap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            blocksize: usize,
            idx: *mut u64,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Ioctl"]
    #[doc = ""]
    #[doc = " flags will have FUSE_IOCTL_COMPAT set for 32bit ioctls in"]
    #[doc = " 64bit environment.  The size and direction of data is"]
    #[doc = " determined by _IOC_*() decoding of cmd.  For _IOC_NONE,"]
    #[doc = " data will be NULL, for _IOC_WRITE data is out area, for"]
    #[doc = " _IOC_READ in area and if both are set in/out area.  In all"]
    #[doc = " non-NULL cases, the area is of _IOC_SIZE(cmd) bytes."]
    #[doc = ""]
    #[doc = " If flags has FUSE_IOCTL_DIR then the fuse_file_info refers to a"]
    #[doc = " directory file handle."]
    #[doc = ""]
    #[doc = " Note : the unsigned long request submitted by the application"]
    #[doc = " is truncated to 32 bits."]
    pub ioctl: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            cmd: ::std::os::raw::c_uint,
            arg: *mut ::std::os::raw::c_void,
            arg2: *mut fuse_file_info,
            flags: ::std::os::raw::c_uint,
            data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Poll for IO readiness events"]
    #[doc = ""]
    #[doc = " Note: If ph is non-NULL, the client should notify"]
    #[doc = " when IO readiness events occur by calling"]
    #[doc = " fuse_notify_poll() with the specified ph."]
    #[doc = ""]
    #[doc = " Regardless of the number of times poll with a non-NULL ph"]
    #[doc = " is received, single notification is enough to clear all."]
    #[doc = " Notifying more times incurs overhead but doesn't harm"]
    #[doc = " correctness."]
    #[doc = ""]
    #[doc = " The callee is responsible for destroying ph with"]
    #[doc = " fuse_pollhandle_destroy() when no longer in use."]
    pub poll: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            ph: *mut fuse_pollhandle,
            reventsp: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Write contents of buffer to an open file"]
    #[doc = ""]
    #[doc = " Similar to the write() method, but data is supplied in a"]
    #[doc = " generic buffer.  Use fuse_buf_copy() to transfer data to"]
    #[doc = " the destination."]
    #[doc = ""]
    #[doc = " Unless FUSE_CAP_HANDLE_KILLPRIV is disabled, this method is"]
    #[doc = " expected to reset the setuid and setgid bits."]
    pub write_buf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            buf: *mut fuse_bufvec,
            off: off_t,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Store data from an open file in a buffer"]
    #[doc = ""]
    #[doc = " Similar to the read() method, but data is stored and"]
    #[doc = " returned in a generic buffer."]
    #[doc = ""]
    #[doc = " No actual copying of data has to take place, the source"]
    #[doc = " file descriptor may simply be stored in the buffer for"]
    #[doc = " later data transfer."]
    #[doc = ""]
    #[doc = " The buffer must be allocated dynamically and stored at the"]
    #[doc = " location pointed to by bufp.  If the buffer contains memory"]
    #[doc = " regions, they too must be allocated using malloc().  The"]
    #[doc = " allocated memory will be freed by the caller."]
    pub read_buf: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            bufp: *mut *mut fuse_bufvec,
            size: usize,
            off: off_t,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Perform BSD file locking operation"]
    #[doc = ""]
    #[doc = " The op argument will be either LOCK_SH, LOCK_EX or LOCK_UN"]
    #[doc = ""]
    #[doc = " Nonblocking requests will be indicated by ORing LOCK_NB to"]
    #[doc = " the above operations"]
    #[doc = ""]
    #[doc = " For more information see the flock(2) manual page."]
    #[doc = ""]
    #[doc = " Additionally fi->owner will be set to a value unique to"]
    #[doc = " this open file.  This same value will be supplied to"]
    #[doc = " ->release() when the file is released."]
    #[doc = ""]
    #[doc = " Note: if this method is not implemented, the kernel will still"]
    #[doc = " allow file locking to work locally.  Hence it is only"]
    #[doc = " interesting for network filesystems and similar."]
    pub flock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            op: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Allocates space for an open file"]
    #[doc = ""]
    #[doc = " This function ensures that required space is allocated for specified"]
    #[doc = " file.  If this function returns success then any subsequent write"]
    #[doc = " request to specified range is guaranteed not to fail because of lack"]
    #[doc = " of space on the file system media."]
    pub fallocate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: off_t,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Copy a range of data from one file to another"]
    #[doc = ""]
    #[doc = " Performs an optimized copy between two file descriptors without the"]
    #[doc = " additional cost of transferring data through the FUSE kernel module"]
    #[doc = " to user space (glibc) and then back into the FUSE filesystem again."]
    #[doc = ""]
    #[doc = " In case this method is not implemented, glibc falls back to reading"]
    #[doc = " data from the source and writing to the destination. Effectively"]
    #[doc = " doing an inefficient copy of the data."]
    pub copy_file_range: ::std::option::Option<
        unsafe extern "C" fn(
            path_in: *const ::std::os::raw::c_char,
            fi_in: *mut fuse_file_info,
            offset_in: off_t,
            path_out: *const ::std::os::raw::c_char,
            fi_out: *mut fuse_file_info,
            offset_out: off_t,
            size: usize,
            flags: ::std::os::raw::c_int,
        ) -> isize,
    >,
}
#[test]
fn bindgen_test_layout_fuse_operations() {
    assert_eq!(
        ::std::mem::size_of::<fuse_operations>(),
        328usize,
        concat!("Size of: ", stringify!(fuse_operations))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).getattr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).readlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).mknod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).mkdir as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).unlink as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).rmdir as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).symlink as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).rename as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).link as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).chmod as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).chown as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).truncate as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).open as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).read as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).write as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).statfs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).flush as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).release as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fsync as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).setxattr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).getxattr as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).listxattr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).removexattr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(removexattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).opendir as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).readdir as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).releasedir as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(releasedir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fsyncdir as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fsyncdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).init as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).destroy as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).access as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).create as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).lock as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).utimens as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(utimens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).bmap as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(bmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).ioctl as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(ioctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).poll as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(poll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).write_buf as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(write_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).read_buf as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(read_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).flock as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(flock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).fallocate as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fallocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_operations>())).copy_file_range as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(copy_file_range)
        )
    );
}
#[doc = " Extra context that may be needed by some filesystems"]
#[doc = ""]
#[doc = " The uid, gid and pid fields are not filled in case of a writepage"]
#[doc = " operation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_context {
    #[doc = " Pointer to the fuse object"]
    pub fuse: *mut fuse,
    #[doc = " User ID of the calling process"]
    pub uid: uid_t,
    #[doc = " Group ID of the calling process"]
    pub gid: gid_t,
    #[doc = " Process ID of the calling thread"]
    pub pid: pid_t,
    #[doc = " Private filesystem data"]
    pub private_data: *mut ::std::os::raw::c_void,
    #[doc = " Umask of the calling process"]
    pub umask: mode_t,
}
#[test]
fn bindgen_test_layout_fuse_context() {
    assert_eq!(
        ::std::mem::size_of::<fuse_context>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_context))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_context>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).fuse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(fuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).uid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).private_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fuse_context>())).umask as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(umask)
        )
    );
}
extern "C" {
    #[doc = " Print available options (high- and low-level) to stdout.  This is"]
    #[doc = " not an exhaustive list, but includes only those options that may be"]
    #[doc = " of interest to an end-user of a file system."]
    #[doc = ""]
    #[doc = " The function looks at the argument vector only to determine if"]
    #[doc = " there are additional modules to be loaded (module=foo option),"]
    #[doc = " and attempts to call their help functions as well."]
    #[doc = ""]
    #[doc = " @param args the argument vector."]
    pub fn fuse_lib_help(args: *mut fuse_args);
}
extern "C" {
    pub fn fuse_new(
        args: *mut fuse_args,
        op: *const fuse_operations,
        op_size: usize,
        private_data: *mut ::std::os::raw::c_void,
    ) -> *mut fuse;
}
extern "C" {
    #[doc = " Mount a FUSE file system."]
    #[doc = ""]
    #[doc = " @param mountpoint the mount point path"]
    #[doc = " @param f the FUSE handle"]
    #[doc = ""]
    #[doc = " @return 0 on success, -1 on failure."]
    pub fn fuse_mount(
        f: *mut fuse,
        mountpoint: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unmount a FUSE file system."]
    #[doc = ""]
    #[doc = " See fuse_session_unmount() for additional information."]
    #[doc = ""]
    #[doc = " @param f the FUSE handle"]
    pub fn fuse_unmount(f: *mut fuse);
}
extern "C" {
    #[doc = " Destroy the FUSE handle."]
    #[doc = ""]
    #[doc = " NOTE: This function does not unmount the filesystem.\t If this is"]
    #[doc = " needed, call fuse_unmount() before calling this function."]
    #[doc = ""]
    #[doc = " @param f the FUSE handle"]
    pub fn fuse_destroy(f: *mut fuse);
}
extern "C" {
    #[doc = " FUSE event loop."]
    #[doc = ""]
    #[doc = " Requests from the kernel are processed, and the appropriate"]
    #[doc = " operations are called."]
    #[doc = ""]
    #[doc = " For a description of the return value and the conditions when the"]
    #[doc = " event loop exits, refer to the documentation of"]
    #[doc = " fuse_session_loop()."]
    #[doc = ""]
    #[doc = " @param f the FUSE handle"]
    #[doc = " @return see fuse_session_loop()"]
    #[doc = ""]
    #[doc = " See also: fuse_loop_mt()"]
    pub fn fuse_loop(f: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Flag session as terminated"]
    #[doc = ""]
    #[doc = " This function will cause any running event loops to exit on"]
    #[doc = " the next opportunity."]
    #[doc = ""]
    #[doc = " @param f the FUSE handle"]
    pub fn fuse_exit(f: *mut fuse);
}
extern "C" {
    pub fn fuse_loop_mt_31(f: *mut fuse, clone_fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current context"]
    #[doc = ""]
    #[doc = " The context is only valid for the duration of a filesystem"]
    #[doc = " operation, and thus must not be stored and used later."]
    #[doc = ""]
    #[doc = " @return the context"]
    pub fn fuse_get_context() -> *mut fuse_context;
}
extern "C" {
    #[doc = " Get the current supplementary group IDs for the current request"]
    #[doc = ""]
    #[doc = " Similar to the getgroups(2) system call, except the return value is"]
    #[doc = " always the total number of group IDs, even if it is larger than the"]
    #[doc = " specified size."]
    #[doc = ""]
    #[doc = " The current fuse kernel module in linux (as of 2.6.30) doesn't pass"]
    #[doc = " the group list to userspace, hence this function needs to parse"]
    #[doc = " \"/proc/$TID/task/$TID/status\" to get the group IDs."]
    #[doc = ""]
    #[doc = " This feature may not be supported on all operating systems.  In"]
    #[doc = " such a case this function will return -ENOSYS."]
    #[doc = ""]
    #[doc = " @param size size of given array"]
    #[doc = " @param list array of group IDs to be filled in"]
    #[doc = " @return the total number of supplementary group IDs or -errno on failure"]
    pub fn fuse_getgroups(size: ::std::os::raw::c_int, list: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check if the current request has already been interrupted"]
    #[doc = ""]
    #[doc = " @return 1 if the request has been interrupted, 0 otherwise"]
    pub fn fuse_interrupted() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Invalidates cache for the given path."]
    #[doc = ""]
    #[doc = " This calls fuse_lowlevel_notify_inval_inode internally."]
    #[doc = ""]
    #[doc = " @return 0 on successful invalidation, negative error value otherwise."]
    #[doc = "         This routine may return -ENOENT to indicate that there was"]
    #[doc = "         no entry to be invalidated, e.g., because the path has not"]
    #[doc = "         been seen before or has been forgotten; this should not be"]
    #[doc = "         considered to be an error."]
    pub fn fuse_invalidate_path(
        f: *mut fuse,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " The real main function"]
    #[doc = ""]
    #[doc = " Do not call this directly, use fuse_main()"]
    pub fn fuse_main_real(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        op: *const fuse_operations,
        op_size: usize,
        private_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Start the cleanup thread when using option \"remember\"."]
    #[doc = ""]
    #[doc = " This is done automatically by fuse_loop_mt()"]
    #[doc = " @param fuse struct fuse pointer for fuse instance"]
    #[doc = " @return 0 on success and -1 on error"]
    pub fn fuse_start_cleanup_thread(fuse: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Stop the cleanup thread when using option \"remember\"."]
    #[doc = ""]
    #[doc = " This is done automatically by fuse_loop_mt()"]
    #[doc = " @param fuse struct fuse pointer for fuse instance"]
    pub fn fuse_stop_cleanup_thread(fuse: *mut fuse);
}
extern "C" {
    #[doc = " Iterate over cache removing stale entries"]
    #[doc = " use in conjunction with \"-oremember\""]
    #[doc = ""]
    #[doc = " NOTE: This is already done for the standard sessions"]
    #[doc = ""]
    #[doc = " @param fuse struct fuse pointer for fuse instance"]
    #[doc = " @return the number of seconds until the next cleanup"]
    pub fn fuse_clean_cache(fuse: *mut fuse) -> ::std::os::raw::c_int;
}
#[doc = " Fuse filesystem object"]
#[doc = ""]
#[doc = " This is opaque object represents a filesystem layer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_fs {
    _unused: [u8; 0],
}
extern "C" {
    pub fn fuse_fs_getattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut stat,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_rename(
        fs: *mut fuse_fs,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_unlink(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_rmdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_symlink(
        fs: *mut fuse_fs,
        linkname: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_link(
        fs: *mut fuse_fs,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_release(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_open(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_read(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_read_buf(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        bufp: *mut *mut fuse_bufvec,
        size: usize,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_write(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_char,
        size: usize,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_write_buf(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut fuse_bufvec,
        off: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fsync(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        datasync: ::std::os::raw::c_int,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_flush(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_statfs(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_opendir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_readdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_void,
        filler: fuse_fill_dir_t,
        off: off_t,
        fi: *mut fuse_file_info,
        flags: fuse_readdir_flags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fsyncdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        datasync: ::std::os::raw::c_int,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_releasedir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_create(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_lock(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
        cmd: ::std::os::raw::c_int,
        lock: *mut flock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_flock(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
        op: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_chmod(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_chown(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        uid: uid_t,
        gid: gid_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_truncate(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        size: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_utimens(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        tv: *const timespec,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_access(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_readlink(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_mknod(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
        rdev: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_mkdir(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_setxattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        size: usize,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_getxattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_listxattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        list: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_removexattr(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_bmap(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        blocksize: usize,
        idx: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_ioctl(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        cmd: ::std::os::raw::c_uint,
        arg: *mut ::std::os::raw::c_void,
        fi: *mut fuse_file_info,
        flags: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_poll(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        fi: *mut fuse_file_info,
        ph: *mut fuse_pollhandle,
        reventsp: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_fallocate(
        fs: *mut fuse_fs,
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
        offset: off_t,
        length: off_t,
        fi: *mut fuse_file_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_fs_copy_file_range(
        fs: *mut fuse_fs,
        path_in: *const ::std::os::raw::c_char,
        fi_in: *mut fuse_file_info,
        off_in: off_t,
        path_out: *const ::std::os::raw::c_char,
        fi_out: *mut fuse_file_info,
        off_out: off_t,
        len: usize,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn fuse_fs_init(fs: *mut fuse_fs, conn: *mut fuse_conn_info, cfg: *mut fuse_config);
}
extern "C" {
    pub fn fuse_fs_destroy(fs: *mut fuse_fs);
}
extern "C" {
    pub fn fuse_notify_poll(ph: *mut fuse_pollhandle) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new fuse filesystem object"]
    #[doc = ""]
    #[doc = " This is usually called from the factory of a fuse module to create"]
    #[doc = " a new instance of a filesystem."]
    #[doc = ""]
    #[doc = " @param op the filesystem operations"]
    #[doc = " @param op_size the size of the fuse_operations structure"]
    #[doc = " @param private_data Initial value for the `private_data`"]
    #[doc = "            field of `struct fuse_context`. May be overridden by the"]
    #[doc = "            `struct fuse_operations.init` handler."]
    #[doc = " @return a new filesystem object"]
    pub fn fuse_fs_new(
        op: *const fuse_operations,
        op_size: usize,
        private_data: *mut ::std::os::raw::c_void,
    ) -> *mut fuse_fs;
}
#[doc = " Factory for creating filesystem objects"]
#[doc = ""]
#[doc = " The function may use and remove options from 'args' that belong"]
#[doc = " to this module."]
#[doc = ""]
#[doc = " For now the 'fs' vector always contains exactly one filesystem."]
#[doc = " This is the filesystem which will be below the newly created"]
#[doc = " filesystem in the stack."]
#[doc = ""]
#[doc = " @param args the command line arguments"]
#[doc = " @param fs NULL terminated filesystem object vector"]
#[doc = " @return the new filesystem object"]
pub type fuse_module_factory_t = ::std::option::Option<
    unsafe extern "C" fn(args: *mut fuse_args, fs: *mut *mut fuse_fs) -> *mut fuse_fs,
>;
extern "C" {
    #[doc = " Get session from fuse object"]
    pub fn fuse_get_session(f: *mut fuse) -> *mut fuse_session;
}
extern "C" {
    #[doc = " Open a FUSE file descriptor and set up the mount for the given"]
    #[doc = " mountpoint and flags."]
    #[doc = ""]
    #[doc = " @param mountpoint reference to the mount in the file system"]
    #[doc = " @param options mount options"]
    #[doc = " @return the FUSE file descriptor or -1 upon error"]
    pub fn fuse_open_channel(
        mountpoint: *const ::std::os::raw::c_char,
        options: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
